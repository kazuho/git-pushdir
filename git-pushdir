#! /usr/bin/perl

use strict;
use warnings;

use File::Temp qw(tempdir);
use Getopt::Long qw(GetOptions);
use Pod::Usage;

# read the args
my $branch = "master";
my ($message, $help);
GetOptions(
    "branch=s" => \$branch,
    "message=s" => \$message,
    "help" => \$help,
) or exit 1;
if ($help) {
    pod2usage(0);
}
die "aborting; no commit message given\n"
    unless defined $message;
die "aborting; no dir or repo given\n"
    if @ARGV < 1;
my $repo = shift;

# check
if (-e ".git") {
    die "aborting; cannot pushdir an entire Git repository\n";
}

# create temporary dir
my $tempdir = tempdir(CLEANUP => 1);

# set all vars in %ENV (so that they can be used without the fear of shell escape errors)
local $ENV{WORKDIR} = $tempdir;
local $ENV{BRANCH} = $branch;
local $ENV{REPO} = $repo;
local $ENV{MESSAGE} = $message;

# git clone
print "# cloning the repo using git\n";
system('cd "$WORKDIR" && git clone --depth=1 --branch="$BRANCH" "$REPO" .') == 0
    or exit 1;

# unlink all files in the repo, and copy from source
print "# updating the files using tar\n";
for my $file (glob("$tempdir/* $tempdir/.??*")) {
    if ($file ne "$tempdir/.git") {
            local $ENV{FN} = $file;
            system('rm -rf "$FN"') == 0
                or die "failed to remove file $file:$!";
    }
}
system('tar cvf - . | (cd "$WORKDIR" && tar xf -)') == 0
    or exit 1;

# add & commit
print "# committing the changes using git\n";
system('cd "$WORKDIR" && git add -A .') == 0
    or exit 1;
system('cd "$WORKDIR" && git commit -m "$MESSAGE"') == 0
    or exit 0; # means that the workdir is clean

# push
print "# pushing the changes using git\n";
system('cd $WORKDIR && git push origin "$BRANCH"') == 0
    or exit 1;

exit 0;

__END__

=head1 NAME

git-pushdir - push files in current directory to a Git repository

=head1 SYNOPSIS

% git-pushdir -m 'commit message' <git-repo-url>

=head1 OPTIONS

=over 4

=item -m <message>

commit message (mandatory)

=item -b <branch>

name of the branch to which the files should be pushed (default: master)

=back

=head1 AUTHOR

Kazuho Oku

=head1 SOURCE REPOSITORY

https://github.com/kazuho/kaztools

=head1 LICENSE

MIT

=cut
